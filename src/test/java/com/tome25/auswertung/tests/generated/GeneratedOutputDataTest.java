package com.tome25.auswertung.tests.generated;

import java.io.IOException;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;

import com.tome25.auswertung.args.Arguments;
import com.tome25.auswertung.log.LogHandler;
import com.tome25.auswertung.stream.FileInputStreamHandler;
import com.tome25.auswertung.stream.FileOutputStreamHandler;
import com.tome25.auswertung.testdata.AntennaDataGenerator;
import com.tome25.auswertung.testdata.AntennaDataGenerator.TestData;
import com.tome25.auswertung.tests.OutputDataTest;
import com.tome25.auswertung.tests.OutputDataTest.TestMappings;
import com.tome25.auswertung.tests.rules.TempFileStreamHandler;
import com.tome25.auswertung.utils.Pair;
import com.tome25.auswertung.utils.TimeUtils;

/**
 * An automatically generated class containing unit tests testing the fill data
 * parsing pipeline.<br/>
 * Generated by a Python script specifically made to be part of this
 * project.<br/>
 * <br/>
 * 
 * <b>WARNING:</b> This file is automatically generated, do not manually edit.
 * 
 * @author theodor
 */
public class GeneratedOutputDataTest {

    /**
     * The {@link TempFileStreamHandler} used to handle the temporary files used for
     * the tests.
     */
    @Rule
    public TempFileStreamHandler tempFolder = new TempFileStreamHandler();

    /**
     * The date at which the test data starts.
     *
     * @see #startTime
     */
    public final String START_DATE = "03.02.2022";

    /**
     * The time at which the test data starts.<br/>
     * The first millisecond of {@link #startDate}.
     */
    public final long START_TIME = TimeUtils.parseDate(START_DATE).getTimeInMillis();

    /**
     * Whether the generated unit tests should be run with debug logging enabled.<br/>
     * Increases run time significantly.
     */
    public final boolean DEBUG = false;

    /**
     * Whether debug mode was previously enabled.
     */
    private boolean wasDebug;

    /**
     * An {@link Arguments} to be used for a single test.<br/>
     * Can be modified since its regenerated in {@link #initialize} anyway.
     */
    public Arguments args;

    /**
     * A file {@link FileInputStreamHandler input}/{@link FileOutputStreamHandler output} stream handler pair
     * pointing to the temporary antenna data file.<br/>
     * Can be modified since its recreated by {@link #initialize} anyway.
     */
    public Pair<FileInputStreamHandler, FileOutputStreamHandler> antennaPair;

    /**
     * A file {@link FileInputStreamHandler input}/{@link FileOutputStreamHandler output} stream handler pair
     * pointing to the temporary downtimes file.<br/>
     * Can be modified since its recreated by {@link #initialize} anyway.
     */
    public Pair<FileInputStreamHandler, FileOutputStreamHandler> downtimesPair;

    /**
     * Initializes some common elements required for every test.<br/>
     * Also resets the seed of the {@link AntennaDataGenerator}.
     *
     * @throws IOException If creating a temporary file fails.
     * @see #reset()
     */
    @Before
    public void initialize() throws IOException {
        args = Arguments.empty();
        AntennaDataGenerator.resetSeed();
        antennaPair = tempFolder.newTempIOFile("antenna.csv");
        downtimesPair = tempFolder.newTempIOFile("downtimes.csv");
        wasDebug = LogHandler.isDebug();
        LogHandler.setDebug(DEBUG);
    }

    /**
     * Resets some things after every test.<br/>
     * Currently resets the {@link AntennaDataGenerator} seed and debug logging.
     *
     * @see #initialize()
     */
    @After
    public void reset() {
        LogHandler.setDebug(wasDebug);
        AntennaDataGenerator.resetSeed();
    }

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDefaultMinTime() throws IOException {
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDefaultMinTimeAdvancedTurkeys() throws IOException {
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDefaultMinTimeNonCont() throws IOException {
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDefaultMinTimeNonContAdvancedTurkeys() throws IOException {
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDefaultMinTimeIncomplete() throws IOException {
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDefaultMinTimeIncompleteAdvancedTurkeys() throws IOException {
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDefaultMinTimeIncompleteNonCont() throws IOException {
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDefaultMinTimeIncompleteNonContAdvancedTurkeys() throws IOException {
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultNoMinTime() throws IOException {
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultNoMinTimeAdvancedTurkeys() throws IOException {
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultNoMinTimeNonCont() throws IOException {
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultNoMinTimeNonContAdvancedTurkeys() throws IOException {
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultNoMinTimeIncomplete() throws IOException {
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultNoMinTimeIncompleteAdvancedTurkeys() throws IOException {
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultNoMinTimeIncompleteNonCont() throws IOException {
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultNoMinTimeIncompleteNonContAdvancedTurkeys() throws IOException {
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void default30MinMinTime() throws IOException {
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void default30MinMinTimeAdvancedTurkeys() throws IOException {
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void default30MinMinTimeNonCont() throws IOException {
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void default30MinMinTimeNonContAdvancedTurkeys() throws IOException {
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void default30MinMinTimeIncomplete() throws IOException {
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void default30MinMinTimeIncompleteAdvancedTurkeys() throws IOException {
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void default30MinMinTimeIncompleteNonCont() throws IOException {
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void default30MinMinTimeIncompleteNonContAdvancedTurkeys() throws IOException {
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesDefaultMinTime() throws IOException {
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesDefaultMinTimeAdvancedTurkeys() throws IOException {
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesDefaultMinTimeNonCont() throws IOException {
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesDefaultMinTimeNonContAdvancedTurkeys() throws IOException {
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesDefaultMinTimeIncomplete() throws IOException {
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesDefaultMinTimeIncompleteAdvancedTurkeys() throws IOException {
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesDefaultMinTimeIncompleteNonCont() throws IOException {
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesDefaultMinTimeIncompleteNonContAdvancedTurkeys() throws IOException {
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesNoMinTime() throws IOException {
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesNoMinTimeAdvancedTurkeys() throws IOException {
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesNoMinTimeNonCont() throws IOException {
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesNoMinTimeNonContAdvancedTurkeys() throws IOException {
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesNoMinTimeIncomplete() throws IOException {
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesNoMinTimeIncompleteAdvancedTurkeys() throws IOException {
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesNoMinTimeIncompleteNonCont() throws IOException {
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesNoMinTimeIncompleteNonContAdvancedTurkeys() throws IOException {
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimes30MinMinTime() throws IOException {
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimes30MinMinTimeAdvancedTurkeys() throws IOException {
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimes30MinMinTimeNonCont() throws IOException {
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimes30MinMinTimeNonContAdvancedTurkeys() throws IOException {
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimes30MinMinTimeIncomplete() throws IOException {
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimes30MinMinTimeIncompleteAdvancedTurkeys() throws IOException {
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimes30MinMinTimeIncompleteNonCont() throws IOException {
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimes30MinMinTimeIncompleteNonContAdvancedTurkeys() throws IOException {
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDefaultMinTime() throws IOException {
		args.fillDays = true;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDefaultMinTimeAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDefaultMinTimeNonCont() throws IOException {
		args.fillDays = true;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDefaultMinTimeNonContAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDefaultMinTimeIncomplete() throws IOException {
		args.fillDays = true;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDefaultMinTimeIncompleteAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDefaultMinTimeIncompleteNonCont() throws IOException {
		args.fillDays = true;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDefaultMinTimeIncompleteNonContAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysNoMinTime() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysNoMinTimeAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysNoMinTimeNonCont() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysNoMinTimeNonContAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysNoMinTimeIncomplete() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysNoMinTimeIncompleteAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysNoMinTimeIncompleteNonCont() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysNoMinTimeIncompleteNonContAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDays30MinMinTime() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDays30MinMinTimeAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDays30MinMinTimeNonCont() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDays30MinMinTimeNonContAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDays30MinMinTimeIncomplete() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDays30MinMinTimeIncompleteAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDays30MinMinTimeIncompleteNonCont() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDays30MinMinTimeIncompleteNonContAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesDefaultMinTime() throws IOException {
		args.fillDays = true;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesDefaultMinTimeAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesDefaultMinTimeNonCont() throws IOException {
		args.fillDays = true;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesDefaultMinTimeNonContAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesDefaultMinTimeIncomplete() throws IOException {
		args.fillDays = true;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesDefaultMinTimeIncompleteAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesDefaultMinTimeIncompleteNonCont() throws IOException {
		args.fillDays = true;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesDefaultMinTimeIncompleteNonContAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesNoMinTime() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesNoMinTimeAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesNoMinTimeNonCont() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesNoMinTimeNonContAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesNoMinTimeIncomplete() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesNoMinTimeIncompleteAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesNoMinTimeIncompleteNonCont() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesNoMinTimeIncompleteNonContAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimes30MinMinTime() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimes30MinMinTimeAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimes30MinMinTimeNonCont() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimes30MinMinTimeNonContAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimes30MinMinTimeIncomplete() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimes30MinMinTimeIncompleteAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, true, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test does not use turkeys with start zone or end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimes30MinMinTimeIncompleteNonCont() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, false, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.<br/>
	 * This unit test uses turkeys with start zone and end time.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimes30MinMinTimeIncompleteNonContAdvancedTurkeys() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestMappings mappings = OutputDataTest.generateTestMappings(100, 5, 5, true, START_TIME, START_TIME + 24 * 3600000 * 10, tempFolder);
		final TestData generated = OutputDataTest.generateTestValues(mappings, START_DATE, 10, args, false, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}
}
