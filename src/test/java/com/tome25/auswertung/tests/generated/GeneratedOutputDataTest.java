package com.tome25.auswertung.tests.generated;

import java.io.IOException;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;

import com.tome25.auswertung.args.Arguments;
import com.tome25.auswertung.stream.FileInputStreamHandler;
import com.tome25.auswertung.stream.FileOutputStreamHandler;
import com.tome25.auswertung.testdata.AntennaDataGenerator;
import com.tome25.auswertung.testdata.AntennaDataGenerator.TestData;
import com.tome25.auswertung.tests.OutputDataTest;
import com.tome25.auswertung.tests.OutputDataTest.TestMappings;
import com.tome25.auswertung.tests.rules.TempFileStreamHandler;
import com.tome25.auswertung.utils.Pair;

/**
 * An automatically generated class containing unit tests testing the fill data
 * parsing pipeline.<br/>
 * Generated by a Python script specifically made to be part of this
 * project.<br/>
 * <br/>
 * 
 * <b>WARNING:</b> This file is automatically generated, do not manually edit.
 * 
 * @author theodor
 */
public class GeneratedOutputDataTest {

    /**
     * The {@link TempFileStreamHandler} used to handle the temporary files used for
     * the tests.
     */
    @Rule
    public TempFileStreamHandler tempFolder = new TempFileStreamHandler();

    /**
     * An {@link Arguments} to be used for a single test.<br/>
     * Can be modified since its regenerated in {@link #initialize} anyway.
     */
    public Arguments args;

    /**
     * A collection of mappings to be used for a single test.<br/>
     * Can be modified since its regenerated in {@link #initialize} anyway.
     */
    public TestMappings mappings;

    /**
     * A file {@link FileInputStreamHandler input}/{@link FileOutputStreamHandler output} stream handler pair
     * pointing to the temporary antenna data file.<br/>
     * Can be modified since its recreated by {@link #initialize} anyway.
     */
    public Pair<FileInputStreamHandler, FileOutputStreamHandler> antennaPair;

    /**
     * A file {@link FileInputStreamHandler input}/{@link FileOutputStreamHandler output} stream handler pair
     * pointing to the temporary downtimes file.<br/>
     * Can be modified since its recreated by {@link #initialize} anyway.
     */
    public Pair<FileInputStreamHandler, FileOutputStreamHandler> downtimesPair;

    /**
     * Initializes some common elements required for every test.<br/>
     * Also resets the seed of the {@link AntennaDataGenerator}.
     * 
     * @throws IOException If writing the test mappings fails.
     */
    @Before
    public void initialize() throws IOException {
        args = Arguments.empty();
        AntennaDataGenerator.resetSeed();
        mappings = OutputDataTest.generateTestMappings(100, 5, tempFolder);
        antennaPair = tempFolder.newTempIOFile("antenna.csv");
        downtimesPair = tempFolder.newTempIOFile("downtimes.csv");
    }

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDefaultMinTime() throws IOException {
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDefaultMinTimeNonCont() throws IOException {
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDefaultMinTimeIncomplete() throws IOException {
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDefaultMinTimeIncompleteNonCont() throws IOException {
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultNoMinTime() throws IOException {
		args.minTime = 0;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultNoMinTimeNonCont() throws IOException {
		args.minTime = 0;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultNoMinTimeIncomplete() throws IOException {
		args.minTime = 0;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultNoMinTimeIncompleteNonCont() throws IOException {
		args.minTime = 0;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void default30MinMinTime() throws IOException {
		args.minTime = 1800;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void default30MinMinTimeNonCont() throws IOException {
		args.minTime = 1800;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void default30MinMinTimeIncomplete() throws IOException {
		args.minTime = 1800;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void default30MinMinTimeIncompleteNonCont() throws IOException {
		args.minTime = 1800;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesDefaultMinTime() throws IOException {
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesDefaultMinTimeNonCont() throws IOException {
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesDefaultMinTimeIncomplete() throws IOException {
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesDefaultMinTimeIncompleteNonCont() throws IOException {
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesNoMinTime() throws IOException {
		args.minTime = 0;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesNoMinTimeNonCont() throws IOException {
		args.minTime = 0;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesNoMinTimeIncomplete() throws IOException {
		args.minTime = 0;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimesNoMinTimeIncompleteNonCont() throws IOException {
		args.minTime = 0;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimes30MinMinTime() throws IOException {
		args.minTime = 1800;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimes30MinMinTimeNonCont() throws IOException {
		args.minTime = 1800;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimes30MinMinTimeIncomplete() throws IOException {
		args.minTime = 1800;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test for the default hadling, aka fillDays disabled.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void defaultDowntimes30MinMinTimeIncompleteNonCont() throws IOException {
		args.minTime = 1800;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDefaultMinTime() throws IOException {
		args.fillDays = true;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDefaultMinTimeNonCont() throws IOException {
		args.fillDays = true;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDefaultMinTimeIncomplete() throws IOException {
		args.fillDays = true;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDefaultMinTimeIncompleteNonCont() throws IOException {
		args.fillDays = true;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysNoMinTime() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysNoMinTimeNonCont() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysNoMinTimeIncomplete() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysNoMinTimeIncompleteNonCont() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDays30MinMinTime() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDays30MinMinTimeNonCont() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, true, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDays30MinMinTimeIncomplete() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test does not use a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDays30MinMinTimeIncompleteNonCont() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, false, tempFolder, antennaPair.getValue(), null);
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), null);
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesDefaultMinTime() throws IOException {
		args.fillDays = true;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesDefaultMinTimeNonCont() throws IOException {
		args.fillDays = true;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesDefaultMinTimeIncomplete() throws IOException {
		args.fillDays = true;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses the default minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesDefaultMinTimeIncompleteNonCont() throws IOException {
		args.fillDays = true;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesNoMinTime() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesNoMinTimeNonCont() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesNoMinTimeIncomplete() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test disables the minimum zone stay time.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimesNoMinTimeIncompleteNonCont() throws IOException {
		args.fillDays = true;
		args.minTime = 0;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimes30MinMinTime() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test generates antenna records for each turkey for each day it generates data for.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimes30MinMinTimeNonCont() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, true, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test generates antenna records for a continuous block of days.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimes30MinMinTimeIncomplete() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, true, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}

	/**
	 * A unit test using fillDays, meaning each day will be considered its own recording.<br/>
	 * This unit test uses a downtimes csv.<br/>
	 * This unit test uses a minimum zone stay time of 30 minutes.<br/>
	 * This unit test skips some days for some turkeys in its antenna records.<br/>
	 * This unit test has some days without data in its antenna records.
	 *
	 * @throws IOException If reading, writing, or creating a temporary file fails.
	 */
	@Test
	public void fillDaysDowntimes30MinMinTimeIncompleteNonCont() throws IOException {
		args.fillDays = true;
		args.minTime = 1800;
		final TestData generated = OutputDataTest.generateTestValues(mappings, 10, args, false, false, tempFolder, antennaPair.getValue(), downtimesPair.getValue());
		final TestData parsed = OutputDataTest.generateParsedData(mappings, args, tempFolder, antennaPair.getKey(), downtimesPair.getKey());
		OutputDataTest.validateResults(generated, parsed, args);
	}
}
